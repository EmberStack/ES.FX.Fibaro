using Newtonsoft.Json.Linq;

namespace ES.FX.Fibaro.Api.Devices.Interfaces
{
    public interface IDeviceProperties
    {
        IArmConditions ArmConditions { get; }
        long? UiMessageSendTime { get; }
        long? AutoConfig { get; }
        bool? Configured { get; }
        string Date { get; }
        bool? Dead { get; }
        long? DeviceControlType { get; }
        long DeviceIcon { get; }
        long? Disabled { get; }
        long? EmailNotificationId { get; }
        long? EmailNotificationType { get; }
        long? EndPoint { get; }
        long? EndPointId { get; }
        string Log { get; }
        string LogTemp { get; }
        string Manufacturer { get; }
        bool? MarkAsDead { get; }
        string Model { get; }
        long? NodeId { get; }
        long? PropertiesNodeId { get; }
        IParameter[] Parameters { get; }
        string ParametersTemplate { get; }
        bool? PollingDeadDevice { get; }
        long? PollingTime { get; }
        long? PollingTimeNext { get; }
        long? PollingTimeSec { get; }
        string ProductInfo { get; }
        long? PushNotificationId { get; }
        long? PushNotificationType { get; }
        long? RemoteGatewayId { get; }
        long? RequestNodeNeighborStat { get; }
        string RequestNodeNeighborStatTimeStemp { get; }
        string RequestNodeNeighborState { get; }
        string RequestNodeNeighborStateTimeStemp { get; }
        bool SaveLogs { get; }
        string SerialNumber { get; }
        long? ShowChildren { get; }
        long? SmsNotificationId { get; }
        long? SmsNotificationType { get; }
        string Status { get; }
        string SunriseHour { get; }
        string SunsetHour { get; }
        bool? UseTemplate { get; }
        string UserDescription { get; }
        object Value { get; }
        string ZwaveBuildVersion { get; }
        string ZwaveCompany { get; }
        string ZwaveInfo { get; }
        string ZwaveRegion { get; }
        string ZwaveVersion { get; }
        string Email { get; }
        long? HotelModeRoom { get; }
        long? LastPwdChange { get; }
        double? Latitude { get; }
        string Location { get; }
        string LocationTime { get; }
        long? LocationTimestamp { get; }
        double? Longitude { get; }
        double? PreviousLatitude { get; }
        string PreviousLocation { get; }
        string PreviousLocationTime { get; }
        long? PreviousLocationTimestamp { get; }
        double? PreviousLongitude { get; }
        bool? SendNotifications { get; }
        long? TrackUser { get; }
        string UserType { get; }
        bool? AtHome { get; }
        string FidUuid { get; }
        long? FirmwareUpdateLevel { get; }
        bool? InitialWizard { get; }
        string SipDisplayName { get; }
        string SipUserId { get; }
        string SipUserPassword { get; }
        bool? UseOptionalArmPin { get; }
        bool? UsePin { get; }
        long? ConditionCode { get; }
        long? ConditionCodeConverted { get; }
        double? Humidity { get; }
        double? Pressure { get; }
        double? Temperature { get; }
        string WeatherCondition { get; }
        double? Wind { get; }
        string[] Categories { get; }
        string DeadReason { get; }
        bool? Hidden { get; }
        string UiCurrentWeatherLabelCaption { get; }
        string UiConfigHiddenCaption { get; }
        bool? UiConfigHiddenEnabled { get; }
        string UiConfigSection1Caption { get; }
        bool? UiConfigSection1Enabled { get; }
        long? BatteryLevel { get; }
        bool? BatteryLowNotification { get; }
        long? DefInterval { get; }
        string DeviceSpecificData { get; }
        string DeviceSpecificIdType { get; }
        string DeviceState { get; }
        long[] LastWorkingRoute { get; }
        string LastWorkingRouteRequestStatus { get; }
        long? LastWorkingRouteRequestTimestamp { get; }
        long? LastWorkingRouteResponseTimestamp { get; }
        long? MaxInterval { get; }
        long? MinInterval { get; }
        long[] NeighborList { get; }
        string NeighborListRequestStatus { get; }
        long? NeighborListRequestTimestamp { get; }
        long? NeighborListResponseTimestamp { get; }
        long? StepInterval { get; }
        long? WakeUpTime { get; }
        object ZwaveSoftwareVersion { get; }
        long? AlarmDelay { get; }
        bool? AlarmExclude { get; }
        long? AlarmLevel { get; }
        long? AlarmTimeTimestamp { get; }
        long? AlarmType { get; }
        long? ArmConfig { get; }
        long? ArmDelay { get; }
        long? ArmTimeTimestamp { get; }
        bool? Armed { get; }
        bool? FibaroAlarm { get; }
        IFirmwareUpdate FirmwareUpdate { get; }
        long? LastBreached { get; }
        bool? Tamper { get; }
        string TamperMode { get; }
        string[] TamperOperatingModes { get; }
        string UpdateVersion { get; }
        long? Offset { get; }
        bool? ShowFireAlarm { get; }
        bool? ShowFreezeAlarm { get; }
        string Unit { get; }
        object[] DeviceGroup { get; }
        long? DeviceGroupMaster { get; }
        bool? IsLight { get; }
        double? Power { get; }
        long? PowerConsumption { get; }
        bool? ShowEnergy { get; }
        long? PollingInterval { get; }
        string Color { get; }
        double? Energy { get; }
        IIcon Icon { get; }
        long? RfProtectionState { get; }
        long? RfProtectionSupport { get; }
        long? LocalProtectionState { get; }
        long? LocalProtectionSupport { get; }
        long? ProtectionExclusiveControl { get; }
        bool? ProtectionExclusiveControlSupport { get; }
        long? ProtectionState { get; }
        long? ProtectionTimeout { get; }
        bool? ProtectionTimeoutSupport { get; }
        ICentralSceneSupport[] CentralSceneSupport { get; }
        string DeviceToken { get; }
        string DeviceUid { get; }
        bool? Push { get; }
        long? LastLoggedUser { get; }
        string Ip { get; }
        long? Port { get; }
        long? CurrentIcon { get; }
        string MainLoop { get; }
        string UiTempValue { get; }
        bool? Visible { get; }
        IRow[] Rows { get; }
        long? DefaultPartyTime { get; }
        long? HeatingZoneId { get; }
        long? Mode { get; }
        long? NextTargetLevel { get; }
        long? NextTargetLevelTimestamp { get; }
        string SupportedModes { get; }
        long? TargetLevel { get; }
        long? TargetLevelTimestamp { get; }
        string ThermostatState { get; }
        long? Timestamp { get; }
        long? State { get; }
        string SwitchAllMode { get; }

        JObject ExtensionData { get; }
        dynamic ExtensionDataDynamic { get; }
    }
}